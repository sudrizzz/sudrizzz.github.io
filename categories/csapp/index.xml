<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSAPP on Anthony's blog</title><link>https://jinggqu.github.io/categories/csapp/</link><description>Recent content in CSAPP on Anthony's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Sep 2020 15:20:11 +0800</lastBuildDate><atom:link href="https://jinggqu.github.io/categories/csapp/index.xml" rel="self" type="application/rss+xml"/><item><title>CMU 15-213 存储器层次结构</title><link>https://jinggqu.github.io/posts/cmu-15-213-lesson3/</link><pubDate>Sun, 20 Sep 2020 15:20:11 +0800</pubDate><guid>https://jinggqu.github.io/posts/cmu-15-213-lesson3/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>本课的第三、四章分别是程序的机器级表示和处理器体系结构，由于过于硬核，此处略过。第五章是优化程序性能，讲解了如何最大限度地提高程序执行效能，此处也略过。本文基于第六章存储器层级结构。&lt;/p>
&lt;h1 id="存储技术">存储技术&lt;/h1>
&lt;p>在本节中主要介绍 SRAM 存储器、DRAM 存储器、ROM 存储器以及机械和固态硬盘。&lt;/p>
&lt;h2 id="随机访问存储器">随机访问存储器&lt;/h2>
&lt;p>随机访问存储器（Random Access Memory, RAM）分为两类：静态的和动态的。静态随机访问存储器（Static Random Access Memory, SRAM）比动态随机访问存储器（Dynamic Random Access Memory, DRAM）更快，但也贵得多。目前 CPU 中的三级缓存都是 SRAM。&lt;/p>
&lt;h3 id="易失性存储器">易失性存储器&lt;/h3>
&lt;p>需要注意的是，虽然 SRAM 是静态随机访问存储器，但是其“静态”是相对于动态随机访问存储器的，仍然属于“易失性存储器”，而非真正意义上的静态，同时 DRAM 也属于“易失性存储器”。通俗的说，就是断电之后保存的信息就会丢失。&lt;/p>
&lt;h4 id="sram">SRAM&lt;/h4>
&lt;p>SRAM 将每个位存储在一个双稳态的存储器单元中，每个单元是用一个六晶体管来实现的，在通电的情况下，它可以无限期地保持在两个不同的电压配置或状态之一，其他任何状态都是不稳定的。当从不稳定状态开始，电路会迅速转换到两个稳定状态中的一个。这样的存储器单元类似于下图倒转的钟摆模型。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200918161742.png"
loading="lazy"
alt="20200918161742"
>&lt;/p>
&lt;p>由于上述的特性（SRAM 的双稳态特性），只要有电，它就会永远保持它的值。即使有干扰（例如电子噪音）来扰乱电压，当干扰消除后，电路就会恢复到稳定值。这样体现了上述表格中的持续性和不敏感性。&lt;/p>
&lt;h4 id="dram">DRAM&lt;/h4>
&lt;p>DRAM 将每个位存储位对一个电容的充电，每个单元由一个电容和一个访问晶体管组成。但是与 SRAM 不同，DRAM 存储单元对抗干扰非常敏感。当电容的电压被扰乱之后，它就永远不会恢复了。&lt;/p>
&lt;h4 id="小结">小结&lt;/h4>
&lt;p>下表总结了 SRAM 和 DRAM 存储器的特性。只要有供电，SRAM 就会保持不变。与 DRAM 不同，它不需要刷新。SRAM 的存取比 DRAM 快。SRAM 对诸如光和电噪声这样的干扰不敏感。代价是 SRAM 单元比 DRAM 单元使用更多的晶体管，因而密集度低，而且更贵，功耗更大。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">每位晶体管数&lt;/th>
&lt;th style="text-align:center">相对访问时间&lt;/th>
&lt;th style="text-align:center">持续的？&lt;/th>
&lt;th style="text-align:center">敏感的？&lt;/th>
&lt;th style="text-align:center">相对花费&lt;/th>
&lt;th style="text-align:center">应用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">SRAM&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">1X&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">1000x&lt;/td>
&lt;td style="text-align:center">高速缓存存储器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">DRAM&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">10X&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">1X&lt;/td>
&lt;td style="text-align:center">主存，帧缓冲区&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="非易失性存储器">非易失性存储器&lt;/h3>
&lt;p>显然，非易失性存储器指即使断电也不会丢失数据的存储器，非易失性存储器包括以下几种：&lt;/p>
&lt;ul>
&lt;li>只读存储器（Read-Only Memory, ROM）：在生产期间被编程，虽然 ROM 中有的类型既可以读也可以写，但是他们整体上都被称为只读存储器&lt;/li>
&lt;li>可编程存储器（Programmable ROM, PROM）：只能被编程一次&lt;/li>
&lt;li>可擦写可编程存储器（Eraseable PROM, EPROM）：有一个透明的石英窗口，允许光到达存储单元。紫外线或者 X 射线照射透过窗口，EPROM 单元就被清除为 0。对 EPROM 编程时通过使用一种把 1 写入 EPROM 的特殊设备来完成的，EPROM 能够被擦除和重编程的次数的数量级可以达到 1000 次&lt;/li>
&lt;li>电子可擦除可编程存储器（Electrically Eraseable PROM, EEPROM）：类似与 EPROM，但它不需要独立的编程设备，可以直接在印刷电路板上编程，EEPROM 可以编程的次数的数量级可以达到 $ 10^{5} $ 次&lt;/li>
&lt;li>闪存（Flash Memory）：基于 EEPROM，多用于手机、相机等产品中，大约 100000 次擦写后失效&lt;/li>
&lt;/ul>
&lt;p>需要说明的是，存储在 ROM 设备中的程序通常被称为固件（firmware）。例如 BIOS、磁盘驱动控制器、显卡驱动控制器等等。&lt;/p>
&lt;h3 id="访问主存">访问主存&lt;/h3>
&lt;p>数据流通过称为总线（bus）的共享电子电路在处理器和 DRAM 主存之间来来回回。例如下图中，连接 I/O 桥接器与总线接口的系统总线（system bus），连接主存与 I/O 桥接器的内存总线(memory bus)。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200918171907.png"
loading="lazy"
alt="20200918171907"
>&lt;/p>
&lt;h4 id="从主存读数据">从主存读数据&lt;/h4>
&lt;p>数据移动路径：主存 -&amp;gt; 内存总线 -&amp;gt; I/O 桥接器 -&amp;gt; 系统总线 -&amp;gt; 总线接口 -&amp;gt; 寄存器&lt;/p>
&lt;h4 id="从主存写数据">从主存写数据&lt;/h4>
&lt;p>数据移动路径：寄存器 -&amp;gt; 总线接口 -&amp;gt; 系统总线 -&amp;gt; I/O 桥接器 -&amp;gt; 内存总线 -&amp;gt; 主存&lt;/p>
&lt;h2 id="机械硬盘">机械硬盘&lt;/h2>
&lt;h3 id="构造">构造&lt;/h3>
&lt;p>磁盘是由盘片（platter）组成的，每个盘片有两个表面（surface）。盘片中央有一个可以旋转的主轴（spindle），它使得盘片以固定的旋转速率（rotational rate）旋转，通常是 5400-15000 转每分钟（Revolution Per Minute，RPM）。磁盘通常包含一个或多个盘片，并封装在一个密闭的空间中。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200921102634.png"
loading="lazy"
alt="20200921102634"
>&lt;/p>
&lt;p>每个盘片的表面是由一组磁道（track）同心圆组成的，每个磁道又被划分为一组扇区（sector）。每个扇区包含相等数据量的数据位（通常是 512 字节），扇区之间由一些间隙（gap）隔开，间隙存储用来表示扇区的格式化位。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200921102745.png"
loading="lazy"
alt="20200921102745"
>&lt;/p>
&lt;h3 id="容量">容量&lt;/h3>
&lt;p>在磁盘容量的计算中，总是按照 1000 进制为准，例如 $ 1GB = 10^{9} Bytes $&lt;/p>
&lt;p>磁盘容量是由以下技术因素决定的：&lt;/p>
&lt;ul>
&lt;li>记录密度（Recording density）（位/英寸）：磁道一英寸的段中可以放入的位数&lt;/li>
&lt;li>磁道密度（Track density）（道/英寸）：从盘片中心出发半径一英寸的段内可以有的磁道数&lt;/li>
&lt;li>面密度（Areal density）（位/平方英寸）：记录密度与磁道密度的乘积&lt;/li>
&lt;/ul>
&lt;p>磁盘容量的计算方式：&lt;/p>
&lt;p>$$ 磁盘容量 = \frac{字节数}{扇区} \times \frac{平均扇区数}{磁道} \times \frac{磁道数}{表面} \times \frac{表面数}{盘片} \times \frac{盘片数}{磁道} $$&lt;/p>
&lt;p>例如现有一磁盘，总共有 5 个盘片，每个盘片有 2 个表面，每个表面有 20000 个磁道，每个磁道平均有 300 个扇区，每个扇区有 512 个字节，计算其磁盘容量。&lt;/p>
&lt;p>$$
\begin{aligned}
磁盘容量 &amp;amp;= \frac{512 字节}{扇区} \times \frac{300 扇区}{磁盘} \times \frac{20000 磁道}{表面} \times \frac{2 表面}{盘片} \times \frac{5盘片}{磁盘} \newline
&amp;amp;= 512 \times 300 \times 20000 \times 2 \times 5 \ Byte \newline
&amp;amp;= 30.72 \ GB
\end{aligned}
$$&lt;/p>
&lt;h2 id="固态硬盘">固态硬盘&lt;/h2>
&lt;p>固态硬盘示意图如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200922160917.png"
loading="lazy"
alt="20200922160917"
>&lt;/p>
&lt;p>一个固态硬盘由 B 个块的序列组成，每个块由 P 页组成。通常，页的大小是 512 字节~4KB，块是由 32~128 页组成的，块的大小为 16KB~512KB。数据是以页为单位读写的，只有在一页所属的块整个被擦除之后，才能写这一页（通常是指该块中的所有位都被设置为 1）。在进行 100000 次重复写之后，块将会磨损损坏。&lt;/p>
&lt;h3 id="分类">分类&lt;/h3>
&lt;p>现阶段的固态硬盘主要分为以下几类&lt;/p>
&lt;ul>
&lt;li>单阶存储单元（Single-Level Cell，SLC）：一个存储单元能存储 1 bit 信息，SLC 闪存的优点是传输速度更快，功率消耗更低和存储单元的寿命更长&lt;/li>
&lt;li>多阶存储单元（Multi-Level Cell，MLC）：一个存储单元能存储 2 bit 信息，MLC 闪存可降低生产成本，但比起 SLC 闪存，其传输速度较慢，功率消耗较高和存储单元的寿命较低&lt;/li>
&lt;li>三阶存储单元（Triple-Level Cell，TLC）：一个存储单元能存储 3 bit 信息，TLC 的写入速度比 SLC 和 MLC 慢，寿命也比 SLC 和 MLC 短（使用 LDPC 的话，约有 1500 次），大约 1000 次&lt;/li>
&lt;li>四阶存储单元（Quad-Level Cell，QLC）：一个存储单元能存储 4 bit 信息，寿命为四者之中最短，大约只有 500 次&lt;/li>
&lt;/ul>
&lt;p>在假设低电位表示二进制的 0，高电位表示二进制的 1 时，SLC、MLC、TLC 和 QLC 的电位及二进制值对比表如下。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200922162556.png"
loading="lazy"
alt="20200922162556"
>&lt;/p>
&lt;h3 id="对比机械硬盘">对比机械硬盘&lt;/h3>
&lt;h4 id="优点">优点&lt;/h4>
&lt;ul>
&lt;li>固态硬盘没有移动部件，因而随机访问时间比机械硬盘快得多，能耗更低，同时也更结实。&lt;/li>
&lt;/ul>
&lt;h4 id="缺点">缺点&lt;/h4>
&lt;ul>
&lt;li>在反复写之后，固态硬盘存储单元容易磨损&lt;/li>
&lt;li>固态硬盘成本更高，相对容量更小&lt;/li>
&lt;/ul>
&lt;h3 id="应用">应用&lt;/h3>
&lt;ul>
&lt;li>智能手机&lt;/li>
&lt;li>笔记本电脑，PC&lt;/li>
&lt;li>服务器&lt;/li>
&lt;/ul>
&lt;h1 id="发展趋势">发展趋势&lt;/h1>
&lt;p>下图以半对数为比例，画出了各类存储以及 CPU 性能的发展趋势。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200924145622.png"
loading="lazy"
alt="20200924145622"
>&lt;/p>
&lt;h1 id="局部性">局部性&lt;/h1>
&lt;p>一个编写良好的计算机程序常常具有良好的局部性（locality）。也就是它们倾向于引用邻近与其他最近引用过的数据项的数据项，或者最近引用过的数据项本身。局部性通常有两种不同的形式：时间局部性（temporal locality）和空间局部性（spatial locality）。&lt;/p>
&lt;p>下面是一些量化评价程序中局部性的一些简单原则：&lt;/p>
&lt;ul>
&lt;li>重复引用相同变量的程序由良好的时间局部性&lt;/li>
&lt;li>对于具有步长为 k 的引用模式的程序，步长越小空间局部性越好。具有步长为 1 的引用模式的程序有很好的空间局部性。在内容中以大步长跳来跳去的程序空间局部性会很差&lt;/li>
&lt;li>对于取质量来说，循环有好的时间和空间局部性。循环体越小，循环迭代次数越多，局部性越好&lt;/li>
&lt;/ul>
&lt;h1 id="存储器层次结构">存储器层次结构&lt;/h1>
&lt;p>存储器层次结构（Memory Hierarchy）如下图所示，越靠近底部的存储器速度越慢单价越低，越靠近顶部的则反之。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200924160033.png"
loading="lazy"
alt="20200924160033"
>&lt;/p>
&lt;h2 id="缓存">缓存&lt;/h2>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>缓存（Cache）是一种容量小但速度极快的存储设备，速度仅次于 CPU 寄存器。它充当速度较慢、容量较大的存储设备的临时存储区。&lt;/p>
&lt;h3 id="层次结构的基本思想">层次结构的基本思想&lt;/h3>
&lt;p>对于第 k 层更快更小的存储设备都充当了第 k+1 层更慢更小的存储设备的缓存。&lt;/p>
&lt;h3 id="存储结构产生的原因">存储结构产生的原因&lt;/h3>
&lt;p>由于局部性，程序通常更倾向于访问第 k 层存储器的数据，而非第 k+1 层存储器的数据。因此，第 k+1 层存储器设备可以做得速度更慢，容量更大以及单价更便宜。&lt;/p>
&lt;h3 id="存储器层次结构中的缓存示例">存储器层次结构中的缓存示例&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200924155525.png"
loading="lazy"
alt="20200924155525"
>&lt;/p>
&lt;h1 id="参考文献">参考文献&lt;/h1>
&lt;ol>
&lt;li>&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E9%97%AA%E5%AD%98" target="_blank" rel="noopener"
>https://zh.wikipedia.org/wiki/%E9%97%AA%E5%AD%98&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/video/av61437877" target="_blank" rel="noopener"
>https://www.bilibili.com/video/av61437877&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>CMU 15-213 浮点数</title><link>https://jinggqu.github.io/posts/cmu-15-213-lesson2/</link><pubDate>Mon, 14 Sep 2020 18:57:11 +0800</pubDate><guid>https://jinggqu.github.io/posts/cmu-15-213-lesson2/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在 &lt;a class="link" href="https://jinggqu.github.io/posts/cmu-15-213-lesson1/" target="_blank" rel="noopener"
>上一篇文章&lt;/a> 中，我们了解了二进制有符号数、无符号数以及其相关的运算方法，在本篇中，我们将进一步了解浮点数在计算机中的相关知识。&lt;/p>
&lt;h1 id="二进制小数">二进制小数&lt;/h1>
&lt;h2 id="表示方法">表示方法&lt;/h2>
&lt;p>二进制小数表达方式：在“二进制小数点”左侧的位表示 2 的 n 次幂，而在“二进制小数点”右侧的位则表示 2 的 -n 次幂。如下图：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200914190724.png"
loading="lazy"
alt="20200914190724"
>&lt;/p>
&lt;p>用公式表达如下：&lt;/p>
&lt;p>$$ a = \sum_{k=-j}^{i}b_{k} \times 2^{k} $$&lt;/p>
&lt;h2 id="示例">示例&lt;/h2>
&lt;p>例如，将十进制小数转换为二进制小数，有以下例子：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">十进制小数&lt;/th>
&lt;th style="text-align:left">二进制小数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">$ 5\frac{3}{4} $&lt;/td>
&lt;td style="text-align:left">101.11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">$ 2\frac{7}{8} $&lt;/td>
&lt;td style="text-align:left">10.111&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">$ 1\frac{7}{16} $&lt;/td>
&lt;td style="text-align:left">1.0111&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>以第一个为例，我们可以注意到二进制小数按位进行求和的结果是：&lt;/p>
&lt;p>$$ 5\frac{3}{4} = 2^{2}+2^{0}+2^{-1}+2^{-2} $$&lt;/p>
&lt;p>通过上面三个例子，我们可以注意到，当二进制小数整体右移一位，即相当于将十进制小数除以 2（仅针对无符号数）。相应的，当二进制小数整体左移一位，即相当于将十进制小数乘以 2。&lt;/p>
&lt;p>同时我们应特别注意到，形如 $ 0.11111&amp;hellip;_{2} $ 的二进制小数，表示略比 1 小的十进制数。用公式表示如下：&lt;/p>
&lt;p>$$ 1/2 + 1/4 + 1/8 + \dots + 1/2^{i} + \dots \to 1.0 $$&lt;/p>
&lt;p>记为：&lt;/p>
&lt;p>$$ 1.0-\varepsilon $$&lt;/p>
&lt;p>其中，$ \varepsilon $ 取决于二进制小数点右边的 1 有多少位，因此，$ \varepsilon $ 越小，则二进制小数越接近 1。&lt;/p>
&lt;h2 id="局限性">局限性&lt;/h2>
&lt;h3 id="不精确">不精确&lt;/h3>
&lt;p>二进制小数仅能准确表示形如 $ x/2^{k} $ 的十进制小数，其他形式的小数则需要采用重复位的方式来表示。例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">十进制小数&lt;/th>
&lt;th style="text-align:left">二进制小数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">1/3&lt;/td>
&lt;td style="text-align:left">$ 0.0101010101[01]\dots $&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">1/5&lt;/td>
&lt;td style="text-align:left">$ 0.001100110011[0011]\dots $&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">1/10&lt;/td>
&lt;td style="text-align:left">$ 0.0001100110011[0011]\dots $&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="位数限制">位数限制&lt;/h3>
&lt;p>由于浮点数位数有限，将浮点数向左移，则可以表示更大的数，但是会损失精度。将浮点数向右移动，精度得到了提高，但是大数又不能进行表示。&lt;/p>
&lt;h1 id="ieee-浮点数">IEEE 浮点数&lt;/h1>
&lt;h2 id="位表示">位表示&lt;/h2>
&lt;p>所有的浮点数均可以写成如下形式：&lt;/p>
&lt;p>$$ V = (-1)^{s} \times M \times 2^{E} $$&lt;/p>
&lt;p>其中，各个字母含义如下：&lt;/p>
&lt;ul>
&lt;li>符号（sign）s 决定这是负数（s=1）还是正数（s=0）&lt;/li>
&lt;li>尾数（significand） M 是一个二进制小数，它的范围是 $ 1 \sim 2 - \varepsilon $，或者是 $ 0 \sim 1 - \varepsilon $&lt;/li>
&lt;li>阶码（exponent）E 的作用是对浮点数进行加权，这个权重是 2 的 E 次幂&lt;/li>
&lt;/ul>
&lt;p>32 位或 64 位的浮点数位表示形式如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200914210832.png"
loading="lazy"
alt="20200914210832"
>&lt;/p>
&lt;p>单精度浮点数各个部分所占的位：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200914211851.png"
loading="lazy"
alt="20200914211851"
>&lt;/p>
&lt;p>双精度浮点数各个部分所占的位：
&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200914211953.png"
loading="lazy"
alt="20200914211953"
>&lt;/p>
&lt;p>将浮点数的位表示划分为三个字段，分别对这些值进行编码：&lt;/p>
&lt;ul>
&lt;li>一个单独的符号位 s 直接编码符号 s&lt;/li>
&lt;li>k 位的阶码字段 $ exp = e_{k-1} \dots e_{1}e_{0} $ 编码阶码 E&lt;/li>
&lt;li>n 位小数字段 $ frac = f_{n-1} \dots f_{1}f_{0} $ 编码尾数 M，但是编码出来的值也依赖于阶码字段的值是否等于 0&lt;/li>
&lt;/ul>
&lt;h2 id="三种情况">三种情况&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200917101541.png"
loading="lazy"
alt="20200917101541"
>&lt;/p>
&lt;h3 id="规格化的值">规格化的值&lt;/h3>
&lt;p>当 exp 所有位即不全为 0，也不全为 1 时，我们称之为规格化的值。在这种情况下，阶码字段被解释为以偏置（biased）形式表示的有符号整数。即&lt;/p>
&lt;p>$$ E = e - Bias $$&lt;/p>
&lt;p>其中 e 是无符号数，其位表示为 $ e_{k-1} \dots e_{1}e_{0} $，而偏置值 $ Bias = 2^{k-1} - 1 $，也即单精度时等于 127，双精度时等于 1023。&lt;/p>
&lt;p>由此编码得到的阶码的取值范围是：&lt;/p>
&lt;ul>
&lt;li>单精度：$ -126 \sim +127 $&lt;/li>
&lt;li>双精度：$ -1022 \sim +1023 $&lt;/li>
&lt;/ul>
&lt;p>小数字段 frac 被解释为描述小数值 f，其中 $ 0 \le f &amp;lt; 1 $，其二进制表示为 $ 0.f_{n-1} \dots f_{1}f_{0} $，也就是小数点在最高有效位的左边。&lt;/p>
&lt;p>尾数定义为 $ M = 1 + f $，因此我们可以将 M 看成一个二进制表达式为 $ 1.f_{n-1} \dots f_{1}f_{0} $ 的数字。此时 $ 1 \le M &amp;lt; 2 $。&lt;/p>
&lt;h3 id="非规格化的值">非规格化的值&lt;/h3>
&lt;p>当阶码全为 0 时，所表示的数是非规格化形式。在这种情况下，$ E = 1-Bias $，$ M = f $，也就是小数部分的值，不包含隐含的开头的 1。&lt;/p>
&lt;p>非规格化数主要有两个作用：用来表示 0 或者表示接近于 0 的数。&lt;/p>
&lt;p>当浮点数二进制位全为 0 时：符号位为 0，阶码全为 0，小数域全为 0，即 $ s = M = f = 0 $，此时表示得到的浮点数是 +0.0。但当符号位为 1 且其他域全为 0 时，可以得到浮点数 -0.0。根据 IEEE 的浮点格式，值 +0.0 和 -0.0 在某些方面被认为是不同的，而在其他方面是相同的。&lt;/p>
&lt;p>非规格化数提供一种称为逐渐溢出（gradually underflow）的属性，可以用来表示接近于 0 的数值。&lt;/p>
&lt;h3 id="特殊情况">特殊情况&lt;/h3>
&lt;p>在阶码全为 1 的前提下，如果小数域全为 0 时，结果为无穷大或无穷小；如果小数域非 0 时，结果为 NaN（Not a Number）。&lt;/p>
&lt;p>其中小数域全为 0 时，当 $ s = 0 $ 时是 $ +\infty $，当 $ s = 1 $ 时是 $ -\infty $。&lt;/p>
&lt;p>一些运算的结果不是实数或者是无穷时，这样就会返回 NaN，例如计算 $ \sqrt{-1} $ 或者 $ \infty - \infty $ 时。&lt;/p>
&lt;h1 id="舍入">舍入&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">舍入方式&lt;/th>
&lt;th style="text-align:center">1.40&lt;/th>
&lt;th style="text-align:center">1.60&lt;/th>
&lt;th style="text-align:center">1.50&lt;/th>
&lt;th style="text-align:center">2.50&lt;/th>
&lt;th style="text-align:center">–1.50&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">向 0 舍入&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">–1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">向下舍入（−∞）&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">–2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">向上舍入（+∞）&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">–1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">向偶数舍入（默认）&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">–2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上述的向偶数舍入实际上就是四舍五入，但需要注意的是，在舍入时优先考虑向偶数舍入。例如上述的 1.50 向上舍入到 2，而 2.5 按照四舍五入应该舍入到 3，由于 3 并不是偶数，故应该向下舍入到 2。&lt;/p>
&lt;p>在现实情况中，向偶数舍入（也称为向最接近的整数）避在大多数情况下避免了统计误差，在 50% 的时间里它将向上取整，而在另外的 50% 时间里它将向下取整，所以它是默认的舍入方式。&lt;/p>
&lt;p>例如我们要对以下数字进行针对百分位的舍入，结果如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">数据&lt;/th>
&lt;th style="text-align:center">结果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">7.8949999&lt;/td>
&lt;td style="text-align:center">7.89&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">7.8950001&lt;/td>
&lt;td style="text-align:center">7.90&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">7.8950000&lt;/td>
&lt;td style="text-align:center">7.90&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">7.8850000&lt;/td>
&lt;td style="text-align:center">7.88&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="浮点运算">浮点运算&lt;/h1>
&lt;h2 id="乘法">乘法&lt;/h2>
&lt;p>定义：&lt;/p>
&lt;p>$$ a = (-1)^{s_{1}} \times M_{1} \times 2^{E_{1}} $$&lt;/p>
&lt;p>$$ b = (-1)^{s_{2}} \times M_{2} \times 2^{E_{2}} $$&lt;/p>
&lt;p>$$ c = a \times b = (-1)^{s} \times M \times 2^{E} $$&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>$ s = s_{1} \land s_{2} $&lt;/li>
&lt;li>$ M = M_{1} \times M_{2} $&lt;/li>
&lt;li>$ E = E_{1} + E_{2} $&lt;/li>
&lt;/ul>
&lt;p>特殊情况处理：&lt;/p>
&lt;ul>
&lt;li>如果 M ≥ 2，将 M 右移，增大 E&lt;/li>
&lt;li>如果 E 超出范围，则溢出到 $ \infty $&lt;/li>
&lt;li>如果 M 位数过多，则舍入到有限位能表示为止&lt;/li>
&lt;/ul>
&lt;h2 id="加法">加法&lt;/h2>
&lt;p>定义：&lt;/p>
&lt;p>$$ a = (-1)^{s_{1}} \times M_{1} \times 2^{E_{1}} $$&lt;/p>
&lt;p>$$ b = (-1)^{s_{2}} \times M_{2} \times 2^{E_{2}} $$&lt;/p>
&lt;p>假定 $ E_{1} \gt E_{2} $，则：&lt;/p>
&lt;p>$$ c = a + b = [(-1)^{s_{1}} \times M_{1} \times 2^{E_{1}-E_{2}} + (-1)^{s_{2}} \times M_{2}] \times 2^{E_{2}} $$&lt;/p>
&lt;p>浮点数加法的一般步骤如下：&lt;/p>
&lt;ol>
&lt;li>对阶：将指数较小的浮点数（b）进行尾数向右移位，指数同步增大，直到两个操作数的指数等&lt;/li>
&lt;li>求和：对尾数进行求和&lt;/li>
&lt;li>规格化：对指数和尾数做规格化，并对尾数进行舍入&lt;/li>
&lt;/ol>
&lt;p>特殊情况处理：&lt;/p>
&lt;ul>
&lt;li>如果 M ≥ 2，将 M 右移，增大 E&lt;/li>
&lt;li>如果 M &amp;lt; 1，将 M 左移，同步减小 E&lt;/li>
&lt;li>如果 E 超出范围，则溢出到 $ \infty $&lt;/li>
&lt;li>如果 M 位数过多，则舍入到有限位能表示为止&lt;/li>
&lt;/ul>
&lt;h1 id="参考文献">参考文献&lt;/h1>
&lt;ol>
&lt;li>&lt;a class="link" href="https://qiankun214.github.io/2019/05/28/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A4%84%E7%90%86/" target="_blank" rel="noopener"
>https://qiankun214.github.io/2019/05/28/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A4%84%E7%90%86/&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>CMU 15-213 位、字节与整数</title><link>https://jinggqu.github.io/posts/cmu-15-213-lesson1/</link><pubDate>Fri, 04 Sep 2020 19:02:11 +0800</pubDate><guid>https://jinggqu.github.io/posts/cmu-15-213-lesson1/</guid><description>&lt;h1 id="简介">简介&lt;/h1>
&lt;p>CSAPP 课程全程 Computer Systems: A Programmer’s Perspective，中文翻译为“从程序员的视角，看计算机系统！”或“深入理解计算机系统”。此课程是卡耐基梅隆大学开设的一门课程，官方网站 &lt;a class="link" href="https://www.cs.cmu.edu/~213/index.html" target="_blank" rel="noopener"
>https://www.cs.cmu.edu/~213/index.html&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>内容简介节选自豆瓣&lt;br>
&lt;a class="link" href="https://book.douban.com/subject/1230413" target="_blank" rel="noopener"
>https://book.douban.com/subject/1230413&lt;/a>&lt;/p>
&lt;p>从程序员的视角，看计算机系统！&lt;/p>
&lt;p>本书适用于那些想要写出更快、更可靠程序的程序员。通过掌握程序是如何映射到系统上，以及程序是如何执行的，读者能够更好的理解程序的行为为什么是这样的，以及效率低下是如何造成的。粗略来看，计算机系统包括处理器和存储器硬件、编译器、操作系统和网络互连环境。而通过程序员的视角，读者可以清晰地明白学习计算机系统的内部工作原理会对他们今后作为计算机科学研究者和工程师的工作有进一步的帮助。它还有助于为进一步学习计算机体系结构、操作系统、编译器和网络互连做好准备。&lt;/p>
&lt;/blockquote>
&lt;h1 id="一切皆位">一切皆位&lt;/h1>
&lt;h2 id="十进制">十进制&lt;/h2>
&lt;p>在计算机发展历史上，实际上只有宾夕法尼亚大学建立的第一台计算机 ENIAC 使用了十进制进行了算术运算，他们使用 10 个电子管来表示每个数字。所以他们通过控制电子管的开关来表示 10 个数字中的其中一个。&lt;/p>
&lt;h2 id="二进制">二进制&lt;/h2>
&lt;p>随着计算机的发展，十进制逐渐演化为二进制。在计算机中，我们使用电学层面上的电压高低来存储位数据，如图所示，高电压（0.9v-1.1v）记作逻辑 1，而低电压（0.0v-0.2v）记作逻辑 0。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200904184249.png"
loading="lazy"
alt="20200904184249"
>&lt;/p>
&lt;p>之所以这么做，是因为通过区分高低电压，可以有效地过滤噪声和杂讯。&lt;/p>
&lt;h2 id="十六进制">十六进制&lt;/h2>
&lt;p>二进制的成功运用也带来了一个问题，由于每一个位只能存储两种信号（即 0 和 1），对于人来说基本属于不可读的，所以我们将每四个二进制在位合并为一个十六进制位，这样大大缩减了数据的展示长度。例如&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200904185017.png"
loading="lazy"
alt="20200904185017"
>&lt;/p>
&lt;h2 id="具体数据类型实际所占空间">具体数据类型实际所占空间&lt;/h2>
&lt;p>此处以 C 语言数据类型为例，因为在 32 位与 64 位机器上所占空间不尽相同，故列下表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>C Data Type&lt;/th>
&lt;th>Typical 32-bit&lt;/th>
&lt;th>Typical 64-bit&lt;/th>
&lt;th>x86-64&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>4&lt;/td>
&lt;td>8&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>4&lt;/td>
&lt;td>4&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>8&lt;/td>
&lt;td>8&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pointer&lt;/td>
&lt;td>4&lt;/td>
&lt;td>8&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="位操作">位操作&lt;/h1>
&lt;h2 id="与或非异或">与、或、非、异或&lt;/h2>
&lt;p>通俗的解释如下：&lt;/p>
&lt;ol>
&lt;li>与（&amp;amp;）：两者都为真时，结果为真，否则为假；&lt;/li>
&lt;li>或（|）：任意一者为真时，结果为真，否则为假；&lt;/li>
&lt;li>非（~）：对元素取反；&lt;/li>
&lt;li>异或（^）：两者性质相同时，结果为假，否则为真。&lt;/li>
&lt;/ol>
&lt;p>详细示例见下图。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200904185942.png"
loading="lazy"
alt="20200904185942"
>&lt;/p>
&lt;h2 id="与集合的关系">与集合的关系&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200904190420.png"
loading="lazy"
alt="20200904190420"
>&lt;/p>
&lt;p>我们将二进制数据从右往左标记位置，红色数字位置代表该为值为 1，右侧集合中数据代表该二进制数据中所有位值为 1 的位置。例如第一个数据 01101001，从右往左计数，第 0、3、5、6 位对应值为 1。对第二个数进行同样的处理。&lt;/p>
&lt;p>此时我们对两个数据进行与、或、非、异或操作时，可以得出下述结论。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数据操作&lt;/th>
&lt;th>对应集合操作&lt;/th>
&lt;th>结果数据&lt;/th>
&lt;th>结果集合&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;amp;&lt;/td>
&lt;td>交集&lt;/td>
&lt;td>1000001&lt;/td>
&lt;td>{0, 6}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>|&lt;/td>
&lt;td>并集&lt;/td>
&lt;td>1111101&lt;/td>
&lt;td>{0, 2, 3, 4, 5, 6}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^&lt;/td>
&lt;td>差集&lt;/td>
&lt;td>111100&lt;/td>
&lt;td>{2, 3, 4, 5}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>~&lt;/td>
&lt;td>补集&lt;/td>
&lt;td>10101010&lt;/td>
&lt;td>{1, 3, 5, 7}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="移位">移位&lt;/h2>
&lt;h3 id="左移-x--y">左移 x &amp;laquo; y&lt;/h3>
&lt;p>左移即将二进数据 x 整体向左移动 y 个位置，并在其右侧补 0。例如&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>结果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>元素 x&lt;/td>
&lt;td>01100010&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;laquo; 3&lt;/td>
&lt;td>00010&lt;em>000&lt;/em>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="右移-x--y">右移 x &amp;raquo; y&lt;/h3>
&lt;p>与左移一样，右移即将二进数据 x 整体向右移动 y 个位置，并在其空缺位填充相应数据。而右移又分为逻辑右移和算数右移，具体区别如下。&lt;/p>
&lt;h4 id="逻辑右移">逻辑右移&lt;/h4>
&lt;p>在逻辑右移过程中，需要在其左侧空缺位置补 0。例如&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>结果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>元素 x&lt;/td>
&lt;td>01100010&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;raquo; 2&lt;/td>
&lt;td>&lt;em>00&lt;/em>101000&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="算术右移">算术右移&lt;/h4>
&lt;p>在算术右移过程中，需要在其左侧空缺位置补 1。例如&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>结果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>元素 x&lt;/td>
&lt;td>01100010&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;raquo; 2&lt;/td>
&lt;td>&lt;em>11&lt;/em>101000&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="无符号数与补码">无符号数与补码&lt;/h1>
&lt;p>无符号数的表达形式：&lt;br>
$$ B2U(X) = \sum_{i=0}^{w-1}x_{i} \cdot 2^{i} $$&lt;/p>
&lt;p>补码的表达形式：&lt;br>
$$ B2T(X) = -x_{w-1}\cdot 2^{w-1}+\sum_{i=0}^{w-2}x_{i}\cdot 2^{i} $$&lt;/p>
&lt;p>在补码中，最高值为 1 时，始终代表 -1，例如：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200904192825.png"
loading="lazy"
alt="20200904192825"
>&lt;/p>
&lt;p>有了补码，计算机就可正常表示负数。例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>十进制&lt;/th>
&lt;th>十六进制&lt;/th>
&lt;th>二进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>x&lt;/td>
&lt;td>15213&lt;/td>
&lt;td>3B 6D&lt;/td>
&lt;td>00111011 01101101&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>y&lt;/td>
&lt;td>-15213&lt;/td>
&lt;td>C4 93&lt;/td>
&lt;td>11000100 10010011&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="数据范围">数据范围&lt;/h2>
&lt;p>此处我们以 16 位二进制数（即 w=16）来探讨无符号数和补码的范围，如下表。
其中，UMax 代表无符号数最大值，TMax 代表补码最大值，TMin 代表补码最小值。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>十进制&lt;/th>
&lt;th>十六进制&lt;/th>
&lt;th>二进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UMax&lt;/td>
&lt;td>65535&lt;/td>
&lt;td>FF FF&lt;/td>
&lt;td>11111111 11111111&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TMax&lt;/td>
&lt;td>32767&lt;/td>
&lt;td>7F FF&lt;/td>
&lt;td>01111111 11111111&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TMin&lt;/td>
&lt;td>-32768&lt;/td>
&lt;td>80 00&lt;/td>
&lt;td>10000000 00000000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-1&lt;/td>
&lt;td>-1&lt;/td>
&lt;td>FF FF&lt;/td>
&lt;td>11111111 11111111&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>00 00&lt;/td>
&lt;td>00000000 00000000&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>当数据的位宽 w 发生变化时，代表的数据最值也会发生相应的变化，如下表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>8 位&lt;/th>
&lt;th>16 位&lt;/th>
&lt;th>32 位&lt;/th>
&lt;th>64 位&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UMax&lt;/td>
&lt;td>255&lt;/td>
&lt;td>65,535&lt;/td>
&lt;td>4,294,967,295&lt;/td>
&lt;td>18,446,744,073,709,551,615&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TMax&lt;/td>
&lt;td>127&lt;/td>
&lt;td>32,767&lt;/td>
&lt;td>2,147,483,647&lt;/td>
&lt;td>9,223,372,036,854,775,807&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TMin&lt;/td>
&lt;td>-128&lt;/td>
&lt;td>-32,768&lt;/td>
&lt;td>-2,147,483,648&lt;/td>
&lt;td>-9,223,372,036,854,775,808&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>根据以上性质，我们可以得出以下结论：&lt;/p>
&lt;p>$$ |TMin| = TMax + 1 $$&lt;/p>
&lt;p>$$ UMax = 2 * TMax + 1 $$&lt;/p>
&lt;h2 id="补码形式转换为无符号数">补码形式转换为无符号数&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200905104914.png"
loading="lazy"
alt="20200905104914"
>&lt;/p>
&lt;h1 id="有符号数扩充">有符号数扩充&lt;/h1>
&lt;p>已知一个 w 位的有符号数 X，现在需要将其转换为 w+k 位相同值的有符号数，可以按照下述步骤进行操作。&lt;/p>
&lt;ol>
&lt;li>将符号标识位（sign bit）拷贝 k 份，填充到扩充的 k 个位置上；&lt;/li>
&lt;li>此时 X 就可以按位表示为&lt;/li>
&lt;/ol>
&lt;p>$$ X^{&amp;rsquo;} = \underbrace{X_{w-1},&amp;hellip;, X_{w-1}}&lt;em>{k 个符号位拷贝}, X&lt;/em>{w-1}, X_{w-2},&amp;hellip;, X_{0} $$&lt;/p>
&lt;p>详细信息如下图所示：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200905110036.png"
loading="lazy"
alt="20200905110036"
>&lt;/p>
&lt;h2 id="示例">示例&lt;/h2>
&lt;p>定义两个 &lt;code>short&lt;/code> 变量 x 与 y，将其分别扩充为 &lt;code>int&lt;/code> 变量，得到 ix 与 iy，详细结果如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">short&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">15213&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">ix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">short&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">15213&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">iy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th style="text-align:right">十进制&lt;/th>
&lt;th style="text-align:right">十六进制&lt;/th>
&lt;th style="text-align:right">二进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>x&lt;/td>
&lt;td style="text-align:right">15213&lt;/td>
&lt;td style="text-align:right">3B 6D&lt;/td>
&lt;td style="text-align:right">00111011 01101101&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ix&lt;/td>
&lt;td style="text-align:right">15213&lt;/td>
&lt;td style="text-align:right">00 00 3B 6D&lt;/td>
&lt;td style="text-align:right">00000000 00000000 00111011 01101101&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>y&lt;/td>
&lt;td style="text-align:right">-15213&lt;/td>
&lt;td style="text-align:right">C4 93&lt;/td>
&lt;td style="text-align:right">11000100 10010011&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iy&lt;/td>
&lt;td style="text-align:right">-15213&lt;/td>
&lt;td style="text-align:right">FF FF C4 93&lt;/td>
&lt;td style="text-align:right">11111111 11111111 11000100 10010011&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="移位实现-2-的次方倍算术操作">移位实现 2 的次方倍算术操作&lt;/h1>
&lt;h2 id="乘法">乘法&lt;/h2>
&lt;p>给定一个整数 u，其 2 的次方倍乘法操作相对简单，且对于无符号数和有符号数都是统一的操作，即将数据的二进制位向左移动，再将移动产生的多余位进行舍弃，剩余位即最终结果。也即&lt;/p>
&lt;p>$$ u &amp;laquo; k = u * 2^{k} $$&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200905111913.png"
loading="lazy"
alt="20200905111913"
>&lt;/p>
&lt;h2 id="除法">除法&lt;/h2>
&lt;h3 id="无符号数">无符号数&lt;/h3>
&lt;p>给定一个无符号数 u，对其做 2 的次方倍除法，相当于将其二进制位向右进行逻辑移位，再将小数部分进行舍弃（向下取整），剩余位即最终结果。也即&lt;/p>
&lt;p>$$ u &amp;raquo; k = \lfloor u / 2^{k} \rfloor $$&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200905112056.png"
loading="lazy"
alt="20200905112056"
>&lt;/p>
&lt;p>例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th style="text-align:right">算术除法&lt;/th>
&lt;th style="text-align:right">计算结果&lt;/th>
&lt;th style="text-align:right">十六进制&lt;/th>
&lt;th>二进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>x&lt;/td>
&lt;td style="text-align:right">15213&lt;/td>
&lt;td style="text-align:right">15213&lt;/td>
&lt;td style="text-align:right">3B 6D&lt;/td>
&lt;td>00111011 01101101&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>x &amp;raquo; 1&lt;/td>
&lt;td style="text-align:right">7606.5&lt;/td>
&lt;td style="text-align:right">7606&lt;/td>
&lt;td style="text-align:right">1D B6&lt;/td>
&lt;td>00011101 10110110&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>x &amp;raquo; 4&lt;/td>
&lt;td style="text-align:right">950.8125&lt;/td>
&lt;td style="text-align:right">950&lt;/td>
&lt;td style="text-align:right">03 B6&lt;/td>
&lt;td>00000011 10110110&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>x &amp;raquo; 8&lt;/td>
&lt;td style="text-align:right">59.4257813&lt;/td>
&lt;td style="text-align:right">59&lt;/td>
&lt;td style="text-align:right">00 3B&lt;/td>
&lt;td>00000000 00111011&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="有符号数">有符号数&lt;/h3>
&lt;p>给定一个有符号数 x，对其做 2 的次方倍除法，相当于将其二进制位向右进行算术移位，再将小数部分进行舍弃（向下取整），剩余位即最终结果。也即&lt;/p>
&lt;p>$$ x &amp;raquo; k = \lfloor x / 2^{k} \rfloor $$&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20200905112700.png"
loading="lazy"
alt="20200905112700"
>&lt;/p>
&lt;p>例如：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th style="text-align:right">算术除法&lt;/th>
&lt;th style="text-align:right">计算结果&lt;/th>
&lt;th style="text-align:right">十六进制&lt;/th>
&lt;th>二进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>y&lt;/td>
&lt;td style="text-align:right">-15213&lt;/td>
&lt;td style="text-align:right">-15213&lt;/td>
&lt;td style="text-align:right">C4 93&lt;/td>
&lt;td>11000100 10010011&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>y &amp;raquo; 1&lt;/td>
&lt;td style="text-align:right">-7606.5&lt;/td>
&lt;td style="text-align:right">-7607&lt;/td>
&lt;td style="text-align:right">E2 49&lt;/td>
&lt;td>&lt;em>1&lt;/em>1100010 01001001&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>y &amp;raquo; 4&lt;/td>
&lt;td style="text-align:right">-950.8125&lt;/td>
&lt;td style="text-align:right">-951&lt;/td>
&lt;td style="text-align:right">FC 49&lt;/td>
&lt;td>&lt;em>1111&lt;/em>1100 01001001&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>y &amp;raquo; 8&lt;/td>
&lt;td style="text-align:right">-59.4257813&lt;/td>
&lt;td style="text-align:right">-60&lt;/td>
&lt;td style="text-align:right">FF C4&lt;/td>
&lt;td>&lt;em>11111111&lt;/em> 11000100&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>