<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Airplane Icing on Anthony's blog</title><link>https://jinggqu.github.io/categories/airplane-icing/</link><description>Recent content in Airplane Icing on Anthony's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Apr 2021 08:00:00 +0800</lastBuildDate><atom:link href="https://jinggqu.github.io/categories/airplane-icing/index.xml" rel="self" type="application/rss+xml"/><item><title>飞机结冰论文阅读 2</title><link>https://jinggqu.github.io/posts/airplane-icing-paper-reading-note-2/</link><pubDate>Thu, 22 Apr 2021 08:00:00 +0800</pubDate><guid>https://jinggqu.github.io/posts/airplane-icing-paper-reading-note-2/</guid><description>&lt;h1 id="文章简介">文章简介&lt;/h1>
&lt;h2 id="来源">来源&lt;/h2>
&lt;p>卷积神经网络在机翼升力系数预测中的应用&lt;br>
Application of Convolutional Neural Network to Predict Airfoil Lift Coefficient&lt;br>
&lt;a class="link" href="https://arxiv.org/abs/1712.10082" target="_blank" rel="noopener"
>https://arxiv.org/abs/1712.10082&lt;/a>&lt;/p>
&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>本文主要介绍了 CNN 网络结构，通过 CNN 网络学习预测多种形状翼型在多种流动马赫数、雷诺数和不同攻角下的升力系数，同时使用 MLP 网络进行结果对比。实验结果表明，CNN 网络的预测结果，相比于 MLP 网络的预测结果，有更高的精度。&lt;/p>
&lt;h1 id="网络结构">网络结构&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423164152.png"
loading="lazy"
alt="20210423164152"
>&lt;/p>
&lt;p>本文中用到的 CNN 网络，为修改后的 LeNet-5&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423164230.png"
loading="lazy"
alt="20210423164230"
>&lt;/p>
&lt;p>本文种用到的三种网络结构&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423164300.png"
loading="lazy"
alt="20210423164300"
>&lt;/p>
&lt;p>卷积方案的图示（数字非实际值，仅用于图示）&lt;/p>
&lt;h1 id="数据准备">数据准备&lt;/h1>
&lt;p>根据 freestreamMach 数和像素密度，通过以下方程式进行“着色“：&lt;/p>
&lt;p>$$ \overline\rho = (1 - \frac{\rho}{\rho_{max}}) \frac{M_\infty}{M_{\infty, max}} $$&lt;/p>
&lt;p>原始像素密度 $\rho$ 每个单元格的范围为[0, 100]；对于“完全”位于翼型内部的单元，为 100；对于“完全”位于翼型外部的单元
，为 0；对于位于翼型形状边界上的单元，为（0, 100）。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423164754.png"
loading="lazy"
alt="20210423164754"
>&lt;/p>
&lt;p>上图为 NACA654421a05 型机翼在 22° 仰角时的图示。（左）经过 AoA 倾斜和数字化（通过像素密度），（中）对于 0.8 马赫数未标注尺寸，（右）对于 0.6 马赫数具有相同几何形状&lt;/p>
&lt;p>本文使用的数据集来自于 &lt;a class="link" href="https://m-selig.ae.illinois.edu/ads/coord_database.html" target="_blank" rel="noopener"
>UIUC 机翼数据&lt;/a>中的 NACA 4 位数和 6 位数系列机型，总共 133 套 2D 机翼几何图形被用作训练和验证数据集。所有机翼均具有外部模型线形。&lt;/p>
&lt;p>考虑到流动条件和机翼形状所需的多样性，选择 XFOIL 作为获得空气动力学系数的仿真工具。使用 XFOIL 软件模拟每种翼型在不同流动条件下的升力系数（−10° − 30°），雷诺数（30,000 - 6,500,000）和和自由流马赫数（ 0.3 ‑ 0.8），生成了 40000 条数据，为了提高数据质量和数量，对于具有马赫数和雷诺数的给定组合的每个翼型，还使用对称的升力创建了其“上下颠倒”或翻转的翼型数据，使用以下公式使得数据量增加到 80000 条。&lt;/p>
&lt;p>$$ C_{l, upside-down}(\alpha) = - C_{l,original}(-\alpha)$$&lt;/p>
&lt;p>具体过程图示如下。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423194124.png"
loading="lazy"
alt="20210423194124"
>&lt;/p>
&lt;h1 id="激活函数">激活函数&lt;/h1>
&lt;p>本文探讨了 tanh 与 ReLU 的训练效果，具体结果图示如下。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423194257.png"
loading="lazy"
alt="20210423194257"
>&lt;/p>
&lt;p>故 MLP，AeroCNN‑I 和 AeroCNN‑II 网络采用 ReLU 作为唯一的激活函数，池化和线性单位除外。&lt;/p>
&lt;h1 id="实验结果">实验结果&lt;/h1>
&lt;p>下图为 MLP 与 AeroCNN-I 的训练过程记录。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423194519.png"
loading="lazy"
alt="20210423194519"
>&lt;/p>
&lt;p>下图为 AeroCNN-II 的训练结果。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423194612.png"
loading="lazy"
alt="20210423194612"
>&lt;/p>
&lt;p>下图为真实值与预测 $C_{l-\alpha}$ 曲线在 $M_\infty = 0.3$ 时的对比，翼型为 NACA64a410，包含在训练集中。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423194648.png"
loading="lazy"
alt="20210423194648"
>&lt;/p>
&lt;p>下图为真实值与预测 $C_{l-\alpha}$ 曲线的对比，翼型未包含在训练集中。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210423194847.png"
loading="lazy"
alt="20210423194847"
>&lt;/p>
&lt;h1 id="结论">结论&lt;/h1>
&lt;p>通过以上结果可以得知，对于将流体条件与翼型数据整合而成的”人工图像“，使用 CNN 网络对其进行训练是一个可行的方向。在运行时间方面，在训练 500 个批次的情况下，CNN 耗时 3206 秒，MLP 耗时 1700 秒，CNN 网络结构训练的每个 EPOCH 所需的计算步骤和时间要比 MLP 网络多得多。总之，作为概念的证明，提出的 CNN 架构在从给定的示例中学习以及预测样本以外的翼型的升力系数方面都表现出了合理的性能。&lt;/p></description></item><item><title>飞机结冰论文阅读 1</title><link>https://jinggqu.github.io/posts/airplane-icing-paper-reading-note-1/</link><pubDate>Tue, 20 Apr 2021 08:00:00 +0800</pubDate><guid>https://jinggqu.github.io/posts/airplane-icing-paper-reading-note-1/</guid><description>&lt;h1 id="文章简介">文章简介&lt;/h1>
&lt;h2 id="来源">来源&lt;/h2>
&lt;p>深度神经网络在用于飞机结冰检测和特征化的飞行中参数识别中的应用&lt;br>
An application of Deep Neural Networks to the in-flight parameter identification for detection and characterization of aircraft icing&lt;br>
&lt;a class="link" href="https://www.sciencedirect.com/science/article/pii/S1270963817318242" target="_blank" rel="noopener"
>https://www.sciencedirect.com/science/article/pii/S1270963817318242&lt;/a>&lt;/p>
&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>本文将深度神经网络应用于飞行器结冰的检测和表征的飞行参数识别。作者为预处理输入的飞行状态数据，设计了一种类似于真实图片的“状态图像（state-image）”，然后作者设计了一个 DNN 网络结构，该结构可对飞行状态的本地连通性（local connectivity，使用 CNN）和时间特征（temporal characteristics，使用 RNN）进行建模。在文中，作者对以下几种情形进行了实验，分别是：未结冰（clean）、不同部位结冰（机翼、尾翼、机翼与尾翼）以及结冰严重程度（中等结冰、严重结冰）。同时，作者还提供了基于 DNN 的方法与基于基线 $H_{\infty}$ 的识别算法（飞机结冰的最新技术）的比较。基于测试和比较结果，基于 DNN 的方法对多参数输入数据能产生更准确的预测性能。&lt;/p>
&lt;h1 id="实验说明">实验说明&lt;/h1>
&lt;p>对于中度结冰的情况，$T_{cld}$ = 600（飞机结冰时间），$\eta_{ice}(T_{cld})$ = 0.20（结冰严重性参数），$\eta_{ice}(T_{cld}/2)$ = 0.12。对于快速/严重结冰情况，$T_{cld}$ = 300，$\eta_{ice}(T_{cld})$ = 0.30，$\eta_{ice}(T_{cld}/2)$ = 0.20。图 1 展示了两种结冰情形的结冰严重性参数变化，以及未结冰对照组的情况。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210420205418.png"
loading="lazy"
alt="20210420205418"
>&lt;/p>
&lt;h1 id="数据预处理">数据预处理&lt;/h1>
&lt;blockquote>
&lt;p>作者认为仅识别俯仰和横摆力矩稳定系数（$C_{m_a}$，$C_{n_{\beta}}$）是有用的。在纵向平面中，作者展示了 2 个稳定性系数（$C_{m_a}$，$C_{z_a}$）和 2 个控制系数（$C_{m_{\delta_e}}$，$C_{z_{\delta_e}}$）的性能，而在横向平面中，作者展示了 3 个稳定性系数（$C_{y_\beta}$，$C_{l_p}$，$C_{n_\beta}$）和 2 个控制系数（$C_{y_{\delta_r}}$，$C_{l_{\delta_a}}$）的结果。&lt;/p>
&lt;/blockquote>
&lt;p>为进行本文的参数识别，作者在纵向中指定速度（$V$），体轴上的垂直载荷系数（$g_z$），俯仰率（$q$），俯仰角（$\theta$）和高度（$H$）作为输入数据。对于横向，作者使用速度（$V$），体轴上的横向负载系数（$g_y$），横摆率（$r$），横摆角（$\varphi$），偏航角（$r$）和偏航角（$\psi$）作为输入数据。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210420214213.png"
loading="lazy"
alt="20210420214213"
>&lt;/p>
&lt;p>类似于常用的图像（2D 矩阵），作者将飞机结冰数据按照时间划分，将纵向参数分割成 m * n 的矩阵，其中矩阵每行代表一个参数，每列代表某一时刻的所有参数数值；同理，横向参数也划分为 m * n 的矩阵。其中 $n = \Delta T / \Delta t$，文中采用&lt;strong>时间窗口&lt;/strong>的方法来采集数据，设定 $\Delta T=30s$，$n=30$；m 代表参数数量，纵向参数为 5 个，横向参数为 6 个，故对于纵向数据图像尺寸为 5 * 30，横向参数图像尺寸为 6 * 30。完成数据划分后，将图像数据进行了正则化。&lt;/p>
&lt;h1 id="网络结构">网络结构&lt;/h1>
&lt;h2 id="纵向参数">纵向参数&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210420220508.png"
loading="lazy"
alt="20210420220508"
>&lt;/p>
&lt;p>输入为 5 * 30 的数据图像，上半部分为 LSTM 网络，下半部分为 CNN 网络，右半部分为全连接网络，输出为 4 个参数，分别为 $C_{m_a}$、 $C_{m_{\delta_e}}$、$C_{z_a}$ 与 $C_{z_{\delta_e}}$。&lt;/p>
&lt;h2 id="横向参数">横向参数&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210420220652.png"
loading="lazy"
alt="20210420220652"
>&lt;/p>
&lt;p>与纵向参数网络类似，输入为 6 * 30 的数据图像，上半部分为 LSTM 网络，下半部分为 CNN 网络，右半部分为全连接网络，输出为 5 个参数，分别为 $C_{y_\beta}$、$C_{l_p}$、$C_{n_\beta}$、$C_{y_{\delta_r}}$ 与 $C_{l_{\delta_a}}$。&lt;/p>
&lt;h1 id="模拟数据">模拟数据&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210420221433.png"
loading="lazy"
alt="20210420221433"
>&lt;/p>
&lt;p>上图为 Case 0 与 Case 6 两个例子的数据。所有例子如下&lt;/p>
&lt;ul>
&lt;li>Case 0: 未结冰&lt;/li>
&lt;li>Case 1: 机翼，中等结冰&lt;/li>
&lt;li>Case 2: 机翼，严重结冰&lt;/li>
&lt;li>Case 3: 尾翼，中等结冰&lt;/li>
&lt;li>Case 4: 尾翼，严重结冰&lt;/li>
&lt;li>Case 5: 机翼与尾翼，中等结冰&lt;/li>
&lt;li>Case 6: 机翼与尾翼，严重结冰&lt;/li>
&lt;/ul>
&lt;p>作者总共生成了 210 组模拟数据，其中 140 组数据用于训练，70 组数据用于测试。每一份模拟数据总时长 900 秒，因此对于训练集，数据总时长达 35 小时（140 * 900 秒），对于测试集，数据总时长达 17.5 小时（70 * 900 秒）。&lt;/p>
&lt;h1 id="实验结果">实验结果&lt;/h1>
&lt;h2 id="纵向平面">纵向平面&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210421153323.png"
loading="lazy"
alt="20210421153323"
>&lt;/p>
&lt;h2 id="横向平面">横向平面&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210421154045.png"
loading="lazy"
alt="20210421154045"
>&lt;/p>
&lt;p>如上图所述，红色粗实线表示真实值，绿色实线表示 DNN 网络预测值，蓝色虚线表示 $H_{\infty}$ 识别算法得到的结果。根据 $H_{\infty}$ 算法，只有纵向的 $C_{m_a}$ 和横向的 $C_{n_\beta}$ 足够精确。如图所示，这两个参数的 $H_{\infty}$ 识别结果相当准确。$H_{\infty}$ 的其他结果可能会出现不稳定的漂移（$C_{z_a}$，$C_{y_\beta}$ 等），或者毫无意义。与基于 $H_{\infty}$ 的方法相比，对于 $H_{\infty}$ 所要求的参数，DNN 也能产生准确的结果（$C_{m_a}$，$C_{n_\beta}$）。并且对于 $H_{\infty}$ 无法处理的参数（$C_{z_a}$，$C_{m_{\delta_e}}$，$C_{y_\beta}$，$C_{l_{\delta_a}}$ 等），DNN 输出仍然相当准确。&lt;/p>
&lt;h2 id="误差定量分析">误差定量分析&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jinggqu/blog_images@main/20210421171746.png"
loading="lazy"
alt="20210421171746"
>&lt;/p>
&lt;p>当我们将参数识别问题建模为状态跟踪问题时；跟踪误差的 RMSE 值越低，表明跟踪越准确且更及时。因此，基于 DNN 的框架的参数识别性能被认为优于基于基线 $H_{\infty}$ 的方法。&lt;/p></description></item></channel></rss>